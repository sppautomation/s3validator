<?xml version="1.0" encoding="utf-8"?><testsuite errors="1" failures="0" name="pytest" skipped="0" tests="1" time="32.417"><testcase classname="test_performance" file="test_performance.py" line="244" name="test_base_offload" time="31.723"><error message="test setup failure">global_config = &lt;conftest.GlobalConfig object at 0x7f8ebb173f60&gt;, request = &lt;SubRequest &apos;setup&apos; for &lt;Function test_base_offload&gt;&gt;

    @pytest.fixture(scope=&quot;module&quot;)
    def setup(global_config, request):
        resources = {}
        resources[&apos;snapshots&apos;] = []
        resources[&apos;delete_partner&apos;] = True
        request.addfinalizer(lambda: cleanup(global_config, resources))
        session = global_config.session
        pool_id = global_config.pool_id
        resources[&apos;poolid&apos;] = pool_id
    
        data = {&quot;name&quot;: &quot;vol_testoffload&quot;, &quot;volume_type&quot;: &quot;filesystem&quot;, &quot;pool_id&quot;: pool_id}
    
        resources[&apos;volume&apos;] = client.VsnapAPI(session, &apos;volume&apos;).post(data=data)
    
        # creating share for source volume
        sharedata = {&quot;share_type&quot;: &quot;nfs&quot;,
                     &quot;share_options&quot;: {
                         &quot;allowed_hosts&quot;: &quot;all&quot;
                     }}
    
        share = client.VsnapAPI(session, &apos;volume&apos;).post(path=resources[&apos;volume&apos;][&apos;id&apos;] + &quot;/share&quot;, data=sharedata)
        resources[&apos;shareid&apos;] = share[&apos;id&apos;]
        share_name = share[&apos;name&apos;]
        resources[&apos;share_id&apos;] = share[&apos;id&apos;]
    
    
        if os.path.exists(&quot;/tmp/test_source_mountpoint&quot;):
            shutil.rmtree(&quot;/tmp/test_source_mountpoint&quot;)
&gt;       os.makedirs(&quot;/tmp/test_source_mountpoint&quot;)

test_performance.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = &apos;/tmp/test_source_mountpoint&apos;, mode = 511, exist_ok = False

    def makedirs(name, mode=0o777, exist_ok=False):
        &quot;&quot;&quot;makedirs(name [, mode=0o777][, exist_ok=False])
    
        Super-mkdir; create a leaf directory and all intermediate ones.  Works like
        mkdir, except that any intermediate path segment (not just the rightmost)
        will be created if it does not exist. If the target directory already
        exists, raise an OSError if exist_ok is False. Otherwise no exception is
        raised.  This is recursive.
    
        &quot;&quot;&quot;
        head, tail = path.split(name)
        if not tail:
            head, tail = path.split(head)
        if head and tail and not path.exists(head):
            try:
                makedirs(head, mode, exist_ok)
            except FileExistsError:
                # Defeats race condition when another thread created the path
                pass
            cdir = curdir
            if isinstance(tail, bytes):
                cdir = bytes(curdir, &apos;ASCII&apos;)
            if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists
                return
        try:
&gt;           mkdir(name, mode)
E           FileExistsError: [Errno 17] File exists: &apos;/tmp/test_source_mountpoint&apos;

/usr/lib64/python3.4/os.py:237: FileExistsError</error></testcase></testsuite>